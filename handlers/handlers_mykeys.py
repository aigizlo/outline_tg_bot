from aiogram.dispatcher import FSMContext
from logger import logger
from text import instruction, answer_not_keys
from config import dp, bot, err_send
from balance import pay_from_personal_balance, add_referral_bonus
from keyboards.keyboards import *
from logic_keys.add_keys import add_keys, keys_send, get_minimum_used_server
from logic_keys.renewal_keys import renewal_keys
from text import answer_if_buy, answer_if_not_balance, answer_error
from states import MyStates
from user_data import UserData, check_user_in_system
from balance import money_back

amount_to_month = {
    1: one_month,
    2: two_month,
    3: three_month,
    6: six_month
}
# –¥–ª—è —Ç–µ—Å—Ç–æ–≤
#
#
# amount_to_days = {
#     149: 0,
#     269: 1,
#     405: 2,
#     810: 3
# }

amount_to_days = {
    one_month: 31,
    two_month: 62,
    three_month: 93,
    six_month: 184
}


user_data = UserData()


# –º–æ–∏ –∫–ª—é—á–∏
@dp.message_handler(lambda message: message.text == 'üîë–ú–æ–∏ –∫–ª—é—á–∏', state='*')
async def my_keys_command(message: types.Message, state: FSMContext):

    if not check_user_in_system(message.from_user.id):
        await message.answer("–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    telegram_id = message.from_user.id

    FLAG = False

    user_info = user_data.get_userid_firsname_nickname(telegram_id)

    await state.set_state(MyStates.state_my_keys)

    # –∏—â–µ–º —é–∑–µ—Ä_–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_id = user_data.get_user_id(telegram_id)
        # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∫–ª—é—á–µ–π
        name_key = user_data.get_user_name_keys(user_id)
        # —Å–æ–∑–¥–∞–µ–º 2 –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã 1 c –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –∏ '–ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á–∏' –µ—Å–ª–∏ –∫–ª—é—á–∏ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2—É—é - –µ—Å–ª–∏ –∫–ª—é—á–∏ –µ—Å—Ç—å
        keyboard = back_and_prolong_button()

        keyboard_not_keys = back_and_buy_button()

        # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –¥–∞—Ç–æ–π —Ä–∞–±–æ—Ç—ã
        try:
            keys = user_data.get_user_keys_info(user_id)

            answer = keys_send(keys)

            # –µ—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç —Ç–æ –ø–∏—à–µ —á—Ç–æ –∏—Ö –Ω–µ—Ç
            if not answer:
                answer = answer_not_keys
                FLAG = True

            logger.info(f"–ú–æ–∏ –∫–ª—é—á–∏ user - {user_info}")

            # –≤—ã–±–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏—è
            reply_keyboard = keyboard_not_keys if name_key == [] else keyboard

            await message.answer(answer, parse_mode='HTML',
                                 disable_web_page_preview=True,
                                 reply_markup=reply_keyboard)
            if not FLAG:
                await message.answer(instruction,
                                     parse_mode='HTML',
                                     disable_web_page_preview=True,
                                     reply_markup=reply_keyboard)
        except Exception as e:
            logger.error(f"{e}")
    except Exception as e:
        logger.error(f"ERROR:–ú–æ–∏ –∫–ª—é—á–∏, user - {user_info}, –æ—à–∏–±–∫–∞ - {e}")
        await message.answer(answer_error, reply_markup=main_menu())


# –ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á–∏                                                              –∑–¥–µ—Å—å –ª–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@dp.message_handler(lambda message: message.text == '‚åõÔ∏è–ü—Ä–æ–¥–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–π', state="*")
async def prolong_key_command(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    user_info = user_data.get_userid_firsname_nickname(telegram_id)

    # –∏—â–µ–º —é–∑–µ—Ä_–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_id = user_info[0]
        # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∫–ª—é—á–µ–π
        name_key = user_data.get_user_name_keys(user_id)

        if not user_data.get_user_name_keys(user_id):
            answer = "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è –∏—Ö –ø—Ä–æ–¥–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª"
            await message.answer(answer)
            keyboard = back_button()
            await message.answer(answer, reply_markup=keyboard)
            return
        # –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–∏, —Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        key_buttons = generate_key_buttons(name_key)
        answer = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å :"
        logger.info(f"–ü—Ä–æ–¥–ª–∏—Ç—å –∫–æ–ª—é—á–∏ user - {user_info}")

        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(answer, reply_markup=key_buttons)

    except Exception as e:
        logger.error(f"ERROR:–ü—Ä–æ–¥–ª–∏—Ç—å –∫–æ–ª—é—á–∏ user - {user_info} –æ—à–∏–±–∫–∞ - {e}")
        await message.answer(answer_error, reply_markup=main_menu())


# –í—ã—é–∏—Ä–∞–µ–º –∫–∞–∫–æ–π –∫–ª—é—á –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω
@dp.callback_query_handler(lambda c: c.data.startswith("select_key"), state='*')
async def process_select_key(callback_query: types.CallbackQuery, state: FSMContext):
    telegram_id = callback_query.from_user.id
    user_info = user_data.get_userid_firsname_nickname(telegram_id)
    try:
        # –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        selected_key = callback_query.data.split(":")[1]

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ—Ç –∫–ª—é—á –≤ –ø–∞–º—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(key_name=selected_key)
        # —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logger.info(f"–í—ã–±—Ä–∞–Ω –∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è - {selected_key}, user - {user_info}")

        # —É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ –≤—ã–±–æ—Ä—É –∫–ª—é—á–µ–π
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

        # –≤—ã–≤–æ–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≥–¥–µ —é–∑–µ—Ä –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        keyboard = choice_renewal_period()

        await bot.send_message(callback_query.from_user.id,
                               f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –≤–∞—à –∫–ª—é—á: <b>{selected_key}</b>",
                               parse_mode='HTML',
                               reply_markup=keyboard)
        # –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(MyStates.state_key_for_renewal)

        await bot.answer_callback_query(callback_query.id)

    except Exception as e:
        logger.error(f"ERROR: –ù–ï –í—ã–±—Ä–∞–Ω –∫–ª—é—á –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è - {selected_key}, user - {user_info}, "
                     f"user - {telegram_id}, –æ—à–∏–±–∫–∞ {e}")
        await bot.send_message(answer_error, reply_markup=main_menu())


@dp.callback_query_handler(lambda c: c.data.startswith('renewal:'), state=MyStates.state_key_for_renewal)
async def renewal_process(callback_query: types.CallbackQuery, state: FSMContext):
    telegram_id = callback_query.from_user.id

    user_info = user_data.get_userid_firsname_nickname(telegram_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data, –º–µ—Å—è—Ü
        month = int(callback_query.data.split(':')[1])

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—É–º–º—É –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—è—Ü–µ–≤
        amount = amount_to_month.get(month, None)

        user_id = user_info[0]

        # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏ –æ–±–æ–∑–Ω–∞—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
        await state.update_data(user_id=user_id, action='renewal', month=month)

        # —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

        answer = f"–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ <b>{amount}</b> —Ä—É–±–ª–µ–π, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"

        # –∫–ª–∞–≤–∞
        keyboard = get_pay_method_keyboard()

        await state.set_state(MyStates.pay_from_balance)

        logger.info(f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ , user - {user_info} –Ω–∞ —Å—É–º–º—É {amount}, –ø–µ—Ä–∏–æ–¥ - {month}")

        await bot.send_message(chat_id=callback_query.message.chat.id, text=answer, parse_mode='HTML',
                               reply_markup=keyboard)
    except Exception as e:
        logger.error(f"ERROR:–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞, user - {user_info}, –æ—à–∏–±–∫–∞ - {e}")
        await bot.send_message(answer_error, reply_markup=main_menu())


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É get_pay_method_keyboard
@dp.callback_query_handler(lambda c: c.data.startswith("balance_pay_sever"), state=MyStates.pay_from_balance)
async def payment_from_balance(callback_query: types.CallbackQuery, state: FSMContext):
    telegram_id = callback_query.from_user.id
    user_info = user_data.get_userid_firsname_nickname(telegram_id)

    # –±–µ—Ä–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data_state = await state.get_data()  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å get_state() –Ω–∞ get_data()
    # –≤—ã—è—Å–Ω—è–µ–º, –ø–æ–∫—É–ø–∫–∞ —ç—Ç–æ –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
    action = user_data_state["action"]

    user_id = user_info[0]
    current_balance = user_data.get_user_balance_ops_by_user_id(user_id)
    keyboard = main_menu()

    try:
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞
        if action == 'pay':
            # —Å—É–º–º–∞
            amount = int(user_data_state["amount"])

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
            if amount > current_balance:
                answer = answer_if_not_balance
                logger.info(f"NONE_BALANCE - –Ω–µ—Ö–≤–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ user - {user_info}, c—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ {amount}")
                await bot.send_message(chat_id=telegram_id, text=answer, reply_markup=kb_inline_prices())
                return

            result_pay = pay_from_personal_balance(user_id, amount)
            # –ø—Ä–æ–≤–æ–¥–∏–º –ø–æ–∫—É–ø–∫—É

            if not result_pay:
                answer = answer_error
                logger.info(f"PAYMENT ERROR - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —É user - {user_info}, c—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ {amount}")
                await bot.send_message(chat_id=telegram_id, text=answer, reply_markup=keyboard)
                return

            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–Ω–∏ –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏
            days = amount_to_days.get(amount, None)

            # –≤—ã–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            server_id = get_minimum_used_server()

            count_keys = user_data.get_keys_ids(user_id)

            count_keys = len(count_keys)

            if not count_keys:
                count_keys = 0

            count_keys = count_keys + 1

            key_name = f"–ö–ª—é—á ‚Ññ {count_keys}"

            key_id = add_keys(server_id, user_id, key_name, days)
            logger.info(f"{key_id} - key_id")
            logger.info(
                f"–û–ø–ª–∞—Ç–∞, user - {user_info}, server - {server_id},—Å—É–º–º–∞ - {amount}")
            # –µ—Å–ª–∏ key_id –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è
            if not key_id:
                answer = answer_error
                # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                if not money_back(user_id, amount):
                    logger.error(
                        f"MONEY BACK - ERROR - —Å—Ä–µ–¥—Å—Ç–≤–∞ –ù–ï–í–û–ó–í–†–ê–©–ï–ù–´ –Ω–∞ –±–∞–ª–∞–Ω—Å user - {user_info}, c—É–º–º–∞ {amount}")
                logger.info(
                    f"MONEY BACK - SUCSSESS - –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å uuser - {user_info}, c—É–º–º–∞ {amount}")

                await bot.send_message(err_send,
                                       f"MONEY BACK - ERROR - —Å—Ä–µ–¥—Å—Ç–≤–∞ –ù–ï–í–û–ó–í–†–ê–©–ï–ù–´ –Ω–∞ –±–∞–ª–∞–Ω—Å user - {user_info}, "
                                       f"c—É–º–º–∞ {amount}")
                await bot.send_message(chat_id=telegram_id,
                                       text=answer,
                                       reply_markup=keyboard)
                return

            # –¥–æ—Å—Ç–∞–µ–º —Å–∞–º –∫–ª—é—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            key_value = user_data.get_key_value(key_id)
            # –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞ –Ω–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
            referer_user_id = user_data.get_referrer_user_id(user_id)
            if user_data.get_referrer_user_id(user_id):
                referer_telegram = user_data.get_tg_if_use_user_id(referer_user_id)
                if not add_referral_bonus(user_id, amount):
                    await bot.send_message(chat_id=err_send,
                                           text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                try:
                    await bot.send_message(referer_telegram, f'–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å {amount * 0.2} —Ä—É–±–ª–µ–π')
                except:
                    pass
            # –µ—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ç—ã –≤—ã—Å—ã–ª–∞–µ–º –µ–º—É –∫–ª—é—á

            location = server_id_country.get(server_id)

            answer = answer_if_buy(key_value, location)

            # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.delete_message(chat_id=telegram_id,
                                     message_id=callback_query.message.message_id)

            await bot.send_message(chat_id=telegram_id,
                                   text=answer,
                                   parse_mode="HTML",
                                   disable_web_page_preview=True,
                                   reply_markup=keyboard)

            await state.finish()  # –∏–ª–∏ await state.set_state("another_state")

        # –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ, –∞ –Ω–µ –ø–æ–∫—É–ø–∫–∞
        if action == "renewal":
            # –ø–µ—Ä–∏–æ–¥ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∫–ª—é—á
            month = user_data_state["month"]
            # –∏–º—è –∫–ª—é—á–∞
            key_name = user_data_state["key_name"]
            # —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏
            amount = amount_to_month.get(month, None)
            logger.info(
                f"PROCESS:–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è , user - {user_info}, key_name -  {key_name}, —Å—É–º–º–∞ -  {amount}")

            if amount > current_balance:
                answer = answer_if_not_balance
                logger.info(
                    f"NONE_BALANCE - –Ω–µ—Ö–≤–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ user - {user_info}, c—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ {amount}")
                await bot.send_message(chat_id=telegram_id, text=answer, reply_markup=kb_inline_prices())
                return

            if not pay_from_personal_balance(user_id, amount):
                answer = answer_error
                logger.info(f"PAYMENT ERROR - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ —É user - {user_info}, c—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ {amount}")
                await bot.send_message(chat_id=telegram_id, text=answer, reply_markup=keyboard)
                return

            if not renewal_keys(user_id, key_name, month):
                await bot.send_message(chat_id=telegram_id, text=answer_error, reply_markup=keyboard)
                if not money_back(user_id, amount):
                    await bot.send_message(err_send, f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å user - {user_info},c—É–º–º–∞ {amount}")
                return

            if user_data.get_referrer_user_id(user_id):
                if not add_referral_bonus(user_id, amount):
                    await bot.send_message(chat_id=err_send,
                                           text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            answer = f"–ü—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞ \"<b>{key_name}</b>\" –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æüëå!\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ <b>¬´Off Radar¬ª!!</b> üòá"
            keyboard = main_menu()
            await bot.delete_message(chat_id=callback_query.message.chat.id,
                                     message_id=callback_query.message.message_id)
            await bot.send_message(chat_id=callback_query.message.chat.id, text=answer, parse_mode="HTML",
                                   reply_markup=keyboard)

            await state.finish()  # –∏–ª–∏ await state.set_state("another_state")

    except Exception as e:
        logger.error(f"ERROR:–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è, user - {user_info}, –æ—à–∏–±–∫–∞ - {e}")
        await bot.send_message(telegram_id, answer_error, reply_markup=main_menu())
        await bot.send_message(err_send, f"ERROR:–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è, user - {user_info}, –æ—à–∏–±–∫–∞ - {e}")



