from logger import logger
from aiogram.dispatcher import FSMContext

from logic_keys.add_keys import add_keys, add_free_keys
from user_data import UserData, check_user_in_system
from config import dp, bot, err_send, support
from keyboards.keyboards import *
from states import MyStates
from text import answer_error, text_free_tariff, instruction, promotion_text, instruction_and_main_menu

user_data = UserData()

amount_to_month = {
    1: one_month,
    2: two_month,
    3: three_month,
}
# –¥–ª—è —Ç–µ—Å—Ç–æ–≤
#
#
# amount_to_days = {
#     149: 0,
#     269: 1,
#     405: 2,
#     810: 3
# }

amount_to_days = {
    one_month: 31,
    two_month: 62,
    three_month: 93,
}

get_keys_handlers = ['üîê–ü–æ–ª—É—á–∏—Ç—å –µ—â–µ –∫–ª—é—á', 'üîê–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á']


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á"
@dp.message_handler(lambda message: message.text in get_keys_handlers, state="*")
async def get_key_command(message: types.Message, state: FSMContext):

    if not check_user_in_system(message.from_user.id):
        await message.answer("–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–≤–∞—Ç—É—Ä—É
    user_info = user_data.get_userid_firsname_nickname(message.from_user.id)

    user_id = user_info[0]

    free_tarrif = user_data.free_tariff(user_id)

    keyboard = choice_period_not_free()

    if free_tarrif == "UNUSED":
        keyboard = choice_period()

    answer = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
    # cur_state = await state.get_state()
    await state.set_state(MyStates.state_get_keys)

    logger.info(f"–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á, user_id - {user_info}")

    await message.answer(answer, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('get_keys:'), state='*')
async def renewal_process(callback_query: types.CallbackQuery, state: FSMContext):
    telegram_id = callback_query.from_user.id

    user_info = user_data.get_userid_firsname_nickname(telegram_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data, –º–µ—Å—è—Ü
        month = int(callback_query.data.split(':')[1])

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—É–º–º—É –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—è—Ü–µ–≤
        amount = amount_to_month.get(month, None)

        user_id = user_info[0]

        # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏ –æ–±–æ–∑–Ω–∞—á–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
        await state.update_data(user_id=user_id, action='pay', month=month, amount=amount)

        # —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

        answer = f"–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ <b>{amount}</b> —Ä—É–±–ª–µ–π, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"

        # –∫–ª–∞–≤–∞
        keyboard = get_pay_method_keyboard()

        await state.set_state(MyStates.pay_from_balance)

        logger.info(f'–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞ , user - {user_info} –Ω–∞ —Å—É–º–º—É {amount}, –ø–µ—Ä–∏–æ–¥ - {month}')

        await bot.send_message(chat_id=callback_query.message.chat.id, text=answer, parse_mode='HTML',
                               reply_markup=keyboard)
    except Exception as e:
        logger.error(f"ERROR:–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞, user - {user_info}, –æ—à–∏–±–∫–∞ - {e}")
        await bot.send_message(answer_error, reply_markup=main_menu())



# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message_handler(lambda message: message.text == 'üîô–ù–∞–∑–∞–¥', state='*')
async def back_command(message: types.Message, state: FSMContext):
    user_info = user_data.get_userid_firsname_nickname(message.from_user.id)

    if not check_user_in_system(message.from_user.id):
        await message.answer("–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    User_Data = UserData()
    main_menu_kb = main_menu()
    logger.info(f"–ù–∞–∑–∞–¥ user - {user_info}")

    await message.answer(instruction_and_main_menu, disable_web_page_preview=True,
                             parse_mode='HTML',
                             reply_markup=main_menu_kb)

    try:
        user_id = User_Data.get_user_id(message.from_user.id)

        if user_id:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –æ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
            if User_Data.free_tariff(user_id) == "UNUSED":
                await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    except Exception as e:
        logger.error(f"ERROR: –ù–∞–∑–∞–¥, user - {user_info}, –æ—à–∏–±–∫–∞ - {e}")
        answer = answer_error
        await message.answer(answer, reply_markup=main_menu_kb)
        await bot.send_message(err_send, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ù–ê–ó–ê–î - {e}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info}")
    await state.finish()


# inline –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
@dp.callback_query_handler(lambda c: c.data == "go_back", state="*")
async def process_callback_go_back(callback_query: types.CallbackQuery):
    user_info = user_data.get_userid_firsname_nickname(callback_query.message.chat.id)
    await bot.answer_callback_query(callback_query.id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await bot.delete_message(chat_id=callback_query.message.chat.id,
                             message_id=callback_query.message.message_id)
    logger.info(f"–û—Ç–º–µ–Ω–∞ - user - {user_info}")


#
@dp.callback_query_handler(lambda c: c.data == "subscribe_ago", state="*")
async def check_subscription(callback_query: types.CallbackQuery):
    telegram_id = callback_query.from_user.id
    subscribe_keyboard = subscribe()

    user_info = user_data.get_userid_firsname_nickname(callback_query.message.chat.id)

    user_id = user_info[0]
    user_name = user_info[1]

    try:
        User_Data = UserData()

        # –í—ã—è—Å–Ω—è–µ–º, –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ —é–∑–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º
        use_free_tariff = User_Data.free_tariff_tg(telegram_id)
        chat_member = await bot.get_chat_member(chat_id="@off_radar",
                                                user_id=telegram_id)

        if chat_member.status in ["member", "administrator", "creator", "owner"]:
            if use_free_tariff == "UNUSED":
                count_keys = user_data.get_keys_ids(user_id)
                count_keys = len(count_keys)
                if not count_keys:
                    count_keys = 0

                count_keys = count_keys + 1

                key_name = f"–ö–ª—é—á ‚Ññ {count_keys}"
                key_id = add_free_keys(user_id, key_name)

                if key_id:
                    key_value = User_Data.get_key_value(key_id)
                    answer = text_free_tariff(key_value)
                    User_Data.change_free_tariff(user_id, 1)
                else:
                    answer = answer_error
                await bot.send_message(chat_id=callback_query.from_user.id,
                                       text=answer, parse_mode="HTML", disable_web_page_preview=True)
                await bot.delete_message(chat_id=callback_query.message.chat.id,
                                         message_id=callback_query.message.message_id)
            else:
                await bot.delete_message(chat_id=callback_query.message.chat.id,
                                         message_id=callback_query.message.message_id)
        else:
            await bot.send_message(chat_id=callback_query.message.chat.id,
                                   text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!",
                                   reply_markup=subscribe_keyboard)
    except Exception as e:
        logger.error(f'ERROR:PROCESS–û - check_subscription - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É {user_id}: {e}')
        await bot.send_message(err_send, f'ERROR:PROCESS–û - check_subscription - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É {user_id}: {e}')


@dp.message_handler(commands=['my_info'], state="*")
async def my_info(message: types.Message):
    try:
        user_info = user_data.get_userid_firsname_nickname(message.from_user.id)

        user_id = user_info[0]

        all_info = user_data.get_user_info(user_id)

        txt_user_id = f"–ú–æ–π user_id : {user_id}\n"

        answer = txt_user_id + all_info

        await message.reply(answer, disable_web_page_preview=True,
                            parse_mode="HTML")
        logger.info(f"my_info command - user {user_id}")

    except Exception as e:
        logger.info(f"COMMAND_ERROR - /my_info, {e}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ .{e}")


@dp.message_handler(commands=['help'], state="*")
async def my_info(message: types.Message):
    await message.reply(f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - {support}")


@dp.message_handler(commands=['instruction'], state="*")
async def my_info(message: types.Message):
    await message.reply(instruction, parse_mode="HTML", disable_web_page_preview=True)
