from create_pay_links import generate_any_pay_link, generate_fropay_link
from balance import creating_payment
from logger import logger
from aiogram.dispatcher import FSMContext
from config import dp, secret_key, bot
from keyboards.keyboards import *
from states import MyStates
from text import answer_error
from user_data import UserData, check_user_in_system

user_data = UserData()


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
@dp.message_handler(lambda message: message.text == 'üí∞–ë–∞–ª–∞–Ω—Å', state='*')
async def balance_command(message: types.Message, state: FSMContext):
    user_info = user_data.get_userid_firsname_nickname(message.from_user.id)

    if not check_user_in_system(message.from_user.id):
        await message.answer("–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    try:
        keyboard = balance_keyboard()

        # –∑–∞–±–∏—Ä–∞–µ–º –∏–∑ –∫–ª–∞—Å—Å–∞ UserData
        user_id = user_info[0]

        await state.update_data(user_id=user_id)

        user_balance = user_data.get_user_balance_ops_by_user_id(user_id)

        answer2 = f"–í–∞—à –±–∞–ª–∞–Ω—Å {user_balance} —Ä—É–±–ª–µ–π"

        logger.info(f"–ë–∞–ª–∞–Ω—Å, user - {user_info}")
        # await state.set_state(MyStates.state_balance)
        await message.answer(answer2, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"ERROR:–ë–∞–ª–∞–Ω—Å, user_id - {user_info}, error - {e}")
        await message.answer(answer_error, reply_markup=main_menu())


@dp.message_handler(lambda message: message.text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', state="*")
async def replenish_balance_comand(message: types.Message, state: FSMContext):
    user_info = user_data.get_userid_firsname_nickname(message.from_user.id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É", reply_markup=kb_inline_prices())
    await state.set_state(MyStates.state_replenish_balance)
    logger.info(f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, user - {user_info}")


# –ø–æ–ª—É—á–∞–µ–º —Å—É–º–º—É, –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(state=MyStates.state_replenish_balance)
async def get_amount_for_payment(message: types.Message, state: FSMContext):
    amount_str = message.text
    user_info = user_data.get_userid_firsname_nickname(message.from_user.id)
    user_data_state = await state.get_data()
    user_id = user_data_state["user_id"]

    amount = int(amount_str)

    # —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º pay_id
    pay_id = creating_payment(amount, user_id)

    desc = f'{user_id},{amount},{pay_id}'

    try:
        if isinstance(amount, int):
            # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
            any_pay_link = generate_any_pay_link(str(pay_id), desc, str(amount), secret_key)
            # –≤—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É

            fropay_link = generate_fropay_link(str(pay_id), str(amount))
            keyboard = kb_pay(amount, any_pay_link, fropay_link)
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã {amount} —Ä—É–±–ª–µ–π.",
                                 reply_markup=keyboard)
            logger.info(f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É - {amount}, user - {user_info}")  #

        else:
            await message.answer("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError as e:

        logger.error(f"ERROR:–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É - {amount}, user - {user_info}, –æ—à–∏–±–∫–∞ - {e}")

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")


@dp.callback_query_handler(lambda c: c.data.startswith('pr:'), state='*')
async def get_amount_for_payment_2(callback_query: types.CallbackQuery):
    try:
        telegram_id = callback_query.from_user.id
        user_info = user_data.get_userid_firsname_nickname(telegram_id)
        user_id = user_info[0]

        amount = int(callback_query.data.split(':')[1])
        pay_id = creating_payment(amount, user_id)

        desc = f'{user_id},{amount},{pay_id}'
        any_pay_link = generate_any_pay_link(str(pay_id), desc, str(amount), secret_key)
        # –≤—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
        fropay_link = generate_fropay_link(str(pay_id), str(amount))
        keyboard = kb_pay(amount, any_pay_link, fropay_link)

        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

        logger.info(f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É - {amount}, user - {user_info}")  #
        await bot.send_message(chat_id=callback_query.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã", parse_mode='HTML',
                               reply_markup=keyboard)
    except Exception as e:
        logger.error(f"ERROR:–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É - {amount}, user - {user_info}, –æ—à–∏–±–∫–∞ - {e}")
        await bot.send_message(answer_error, reply_markup=main_menu())
