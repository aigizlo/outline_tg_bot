from aiogram.dispatcher import FSMContext
from logger import logger
from logic_keys.add_keys import exchange_server
from config import support
from config import dp, bot
from keyboards.keyboards import *
from text import answer_error, answer_if_change
from states import MyStates
from user_data import UserData


user_data = UserData()


@dp.message_handler(lambda message: message.text == 'üîÅ–°–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é VPN', state="*")
async def change_location_handlers(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    user_info = user_data.get_userid_firsname_nickname(telegram_id)
    user_id = user_info[0]

    keys_ids = user_data.get_keys_ids(user_id)

    count_keys = len(keys_ids)

    logger.info(f"(change_location_handlers) –°–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é user - {user_info}")

    # –∏—â–µ–º —é–∑–µ—Ä_–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        if count_keys > 1:

            # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∫–ª—é—á–µ–π
            name_key = user_data.get_user_name_keys(user_id)
            if not user_data.get_user_name_keys(user_id):
                answer = "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è —Å–º–µ–Ω—ã –∏—Ö –ª–æ–∫–∞—Ü–∏–∏, –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞–∑–∞–¥¬ª"
                await message.answer(answer)
                keyboard = back_button()
                await message.answer(answer, reply_markup=keyboard)
                return
            # –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–∏, —Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
            key_buttons = generate_key_buttons_for_exchange(name_key)
            answer = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é :"

            await state.set_state(MyStates.state_key_exchange)

            # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await message.answer(answer, reply_markup=key_buttons)

        else:

            servers = user_data.get_used_server_id()
            key_id = keys_ids[0][0]
            current_server = user_data.get_current_used_server(keys_ids[0][0])
            current_server = current_server[0][0]
            servers = [item[0] for item in servers]
            servers.remove(current_server)
            # –≥–µ–Ω–µ—Ä–∏–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
            keyboard = generate_location_button(servers)

            answer = "–í–ù–ò–ú–ê–ù–ò–ï‚ÄºÔ∏è\n" \
                     "–ü—Ä–∏ —Å–º–µ–Ω–µ –ª–æ–∫–∞—Ü–∏–∏ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª—é—á, —Å –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–µ–π. " \
                     "–°—Ç–∞—Ä—ã–π –∫–ª—é—á –±—É–¥–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω!\n\n" \
                     "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é:"
            await message.answer(answer, reply_markup=keyboard)
            await state.set_state(MyStates.state_key_exchange)
            await state.update_data(key_id=key_id)

    except Exception as e:
        logger.error(f"(change_location_handlers)ERROR:–°–º–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏–∏ user - {user_info} –æ—à–∏–±–∫–∞ - {e}")
        await message.answer(answer_error, reply_markup=main_menu())


# –ú–µ–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏—é
@dp.callback_query_handler(lambda c: c.data.startswith("select_country_for_exchange"), state=MyStates.state_key_exchange)
async def choosing_new_location(callback_query: types.CallbackQuery, state: FSMContext):
    telegram_id = callback_query.from_user.id
    user_info = user_data.get_userid_firsname_nickname(telegram_id)

    # –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã –ª–æ–∫–∞—Ü–∏–π
    selected_server = callback_query.data.split(":")[1]
    user_data_state = await state.get_data()



    try:
        key_id = user_data_state['key_id']

        location = server_id_country.get(int(selected_server))

        logger.info(f"(choosing_new_location) –í—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è {location}, user - {user_info}")

        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

        new_key = exchange_server(key_id, selected_server)

        if not new_key:
            answer = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - {support}"

            await bot.send_message(telegram_id, answer)

            logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ª–æ–∫–∞—Ü–∏–∏ user - {user_info}")

            return

        answer = answer_if_change(new_key, location)

        await bot.send_message(telegram_id, answer, parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f'(choosing_new_location) –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ - {e}')


# –í—ã–±—Ä–∞–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–º–µ–Ω—ã –ª–æ–∫–∞—Ü–∏–∏
@dp.callback_query_handler(lambda c: c.data.startswith("selecting_key_for_exchange"), state=MyStates.state_key_exchange)
async def select_key_for_exchange(callback_query: types.CallbackQuery, state: FSMContext):
    telegram_id = callback_query.from_user.id
    user_info = user_data.get_userid_firsname_nickname(telegram_id)

    user_id = user_info[0]

    selected_key = callback_query.data.split(":")[1]

    logger.info(f"(select_key_for_exchange)–í—ã–±—Ä–∞–Ω –∫–ª—é—á - {selected_key} –¥–ª—è –µ–≥–æ —Å–º–µ–Ω—ã, user - {user_info}")

    try:
        key_id = user_data.get_key_id_with_key_name_and_user_id(selected_key, user_id)

        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

        await state.update_data(key_id=key_id)

        servers = user_data.get_used_server_id()

        servers = [item[0] for item in servers]

        keyboard = generate_location_button(servers)

        answer = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_key}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é:"

        await bot.send_message(telegram_id, answer, reply_markup=keyboard)
    except Exception as e:
        logger.error(f'(select_key_for_exchange) –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–ª—é—á–∞ –¥–ª—è –µ–≥–æ —Å–º–µ–Ω—ã user - {user_info}, {e}')
